{"version":3,"sources":["index.js"],"names":["HierarchyAnalysis","RCI","resultTable","state","criteriasNumber","analoguesNumber","isStartButtinPress","criterias","label","labels","matrix","currentAnalogue","analogues","calcCriterias","currentCalcAnalogue","calcAnalogues","startInputHandler","bind","startButtonHandler","prepareMatrix","prepareAnalogues","handleCurrentMatrix","matrixInputHandle","putValueInMatrix","createCalcMatrix","checkConsistencyRelation","checkGeneralizedRelationshipConsistency","name","event","this","setState","target","value","newCriterias","JSON","parse","stringify","createMatrix","createLabels","arrCriteriasLabel","newAnalogues","forEach","objAnalogue","push","rank","newMatrix","i","row","j","rowMatrix","num","newCurrentAnalogue","indexRow","indexCol","parametrName","parametr","match","digit","split","calculateMatrix","analogue","createResultTable","calcGeometricAverageRow","calcSumGeometricAverageRow","calcNormalizedPriorityVector","calcSumColumn","calcEigenvalueMatrix","calcReconciliationIndex","calcConsistencyRelation","matrixRank","length","rowProduct","reduce","product","cell","eval","numberNormalization","Math","pow","arrSumCol","sum","number","geomAverage","sumGeomAverage","EVM","sumCol","index","NPV","rankMatrix","RI","map","calcOverallPriority","calcGeneralizedHarmonizationIndex","calcGeneralizedRelationshipConsistency","OP","GHI","Number","toFixed","arrOP","zeroRow","indexOf","max","CR","GCR","bestVariant","calcMatrixSection","getBestVariant","CalcMatrixSection","ResultTable","StartWindow","MatrixSection","React","Component","props","id","className","type","onChange","onClick","Matrix","criteriaLabel","matrixName","CurrentAnalogue","CalcSection","createZeroCells","createRows","key","createCell","arrayCells","indexColl","array","CalcMatrix","CurrentCalcAnalogue","ResultMatrix","rowSpan","zeroCol","ReactDOM","render","document","getElementById"],"mappings":"4hEAIMA,kB,2BACF,6BAAe,IAAD,2LACV,oWACKC,IAAM,CAAC,EAAG,EAAG,IAAM,GAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3D,EAAKC,YAAc,KACnB,EAAKC,MAAQ,CACTC,gBAAiB,GACjBC,gBAAiB,GACjBC,oBAAoB,EACpBC,UAAW,CACPC,MAAO,IACPC,OAAQ,KACRC,OAAQ,MAEZC,gBAAiB,EACjBC,UAAW,GACXC,cAAe,KACfC,oBAAqB,EACrBC,cAAe,MAGnB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,oKACzB,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,oKAC1B,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,oKACrB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,oKACxB,EAAKI,oBAAsB,EAAKA,oBAAoBJ,KAAzB,oKAC3B,EAAKK,kBAAoB,EAAKA,kBAAkBL,KAAvB,oKACzB,EAAKM,iBAAmB,EAAKA,iBAAiBN,KAAtB,oKACxB,EAAKO,iBAAmB,EAAKA,iBAAiBP,KAAtB,oKACxB,EAAKQ,yBAA2B,EAAKA,yBAAyBR,KAA9B,oKAChC,EAAKS,wCAA0C,EAAKA,wCAAwCT,KAA7C,oKA7BrC,E,+YAgCIU,EAAMC,GACpBC,KAAKC,SAAL,4JAAgBH,GAAQC,EAAMG,OAAOC,U,2CAIrCH,KAAKV,gBACLU,KAAKC,SAAS,CAACxB,oBAAqBuB,KAAK1B,MAAMG,uB,sCAI/C,IAAI2B,EAAeC,KAAKC,MAAMD,KAAKE,UAAUP,KAAK1B,MAAMI,YACxD0B,EAAavB,OAASmB,KAAKQ,aAAaR,KAAK1B,MAAMC,iBACnD6B,EAAaxB,OAASoB,KAAKS,aAAaL,EAAazB,MAAOqB,KAAK1B,MAAMC,iBACvEyB,KAAKT,iBAAiBa,EAAaxB,QAEnCoB,KAAKC,SAAS,CAACvB,UAAW0B,M,uCAGbM,GAAoB,IAAD,OAC5BC,EAAeN,KAAKC,MAAMD,KAAKE,UAAUP,KAAK1B,MAAMS,YACxD2B,EAAkBE,SAAQ,SAACjC,GACvB,IAAIkC,EAAc,GAClBA,EAAW,cAAoBlC,EAC/BkC,EAAW,OAAa,EAAKJ,aAAa,IAAK,EAAKnC,MAAME,iBAC1DqC,EAAW,OAAa,EAAKL,aAAa,EAAKlC,MAAME,iBACrDmC,EAAaG,KAAKD,MAGtBb,KAAKC,SAAS,CAAClB,UAAW4B,M,mCAGjBI,GAGT,IAFA,IAAIC,EAAY,GAEPC,EAAI,EAAGA,EAAIF,EAAME,IAAK,CAG3B,IAFA,IAAIC,EAAM,GAEDC,EAAI,EAAGA,EAAIJ,EAAMI,IAClBF,IAAME,EACND,EAAIJ,KAAK,GAETI,EAAIJ,KAAK,IAIjBE,EAAUF,KAAK,CAACM,UAAWF,IAG/B,OAAOF,I,mCAGErC,EAAOoC,GAEhB,IADA,IAAInC,EAAS,GACJqC,EAAI,EAAGA,GAAKF,EAAME,IACvBrC,EAAOkC,KAAKnC,EAAQsC,GAGxB,OAAOrC,I,0CAGSyC,EAAKvB,GACrB,IAAIwB,EAAqBtB,KAAK1B,MAAMwB,GAET,IAAvBwB,IAAqC,IAATD,EAC5BC,EAAqB,EACdA,IAAwBtB,KAAK1B,MAAMC,gBAAkB,GAAc,IAAR8C,EAClEC,EAAqBtB,KAAK1B,MAAMC,gBAAkB,EAElD+C,GAAsBD,EAG1BrB,KAAKC,SAAL,4JAAgBH,EAAOwB,M,wCAGTC,EAAUC,EAAUC,EAAc1B,GAChD,IAAI2B,EAAWrB,KAAKC,MAAMD,KAAKE,UAAUP,KAAK1B,MAAMmD,KAEpD,GAAqB,cAAjBA,EAA8B,CAC9B,IAAI5C,EAAS6C,EAAS7C,OACtB6C,EAAS7C,OAASmB,KAAKN,iBAAiBb,EAAQkB,EAAMG,OAAOC,MAAOoB,EAAUC,OAC3E,CACH,IAAI3C,EAAS6C,EAAS1B,KAAK1B,MAAMQ,iBAAiBD,OAClDmB,KAAKN,iBAAiBb,EAAQkB,EAAMG,OAAOC,MAAOoB,EAAUC,GAGhExB,KAAKC,SAAL,4JAAgBwB,EAAeC,M,uCAGlB7C,EAAQsB,EAAOoB,EAAUC,GAEtC,GADA3C,EAAO0C,GAAUH,UAAUI,GAAYrB,EACnCA,EAAMwB,MAAM,MAAO,CACnB,IAAIC,EAAQzB,EAAM0B,MAAM,KAAK,GAC7BhD,EAAO2C,GAAUJ,UAAUG,GAAYK,OAEvC/C,EAAO2C,GAAUJ,UAAUG,GAAY,KAAOpB,EAGlD,OAAOtB,I,yCAGS,IAAD,OACXuB,EAAeC,KAAKC,MAAMD,KAAKE,UAAUP,KAAK1B,MAAMI,YACpDiC,EAAeN,KAAKC,MAAMD,KAAKE,UAAUP,KAAK1B,MAAMS,YAExDiB,KAAK8B,gBAAgB1B,GACrBO,EAAaC,SAAQ,SAAAmB,GAAQ,OAAI,EAAKD,gBAAgBC,MAEtD/B,KAAK3B,YAAc2B,KAAKgC,kBAAkB5B,EAAcO,GACxDX,KAAKC,SAAS,CACVjB,cAAeoB,EACflB,cAAeyB,M,sCAIPe,GACZ1B,KAAKiC,wBAAwBP,GAC7B1B,KAAKkC,2BAA2BR,GAChC1B,KAAKmC,6BAA6BT,GAClC1B,KAAKoC,cAAcV,GACnB1B,KAAKqC,qBAAqBX,GAC1B1B,KAAKsC,wBAAwBZ,GAC7B1B,KAAKuC,wBAAwBb,K,sEAGTA,UAAW,IAAD,YACzB7C,OAAU6C,SAAV7C,OACC2D,WAAa3D,OAAO,GAAGuC,UAAUqB,OACvC5D,OAAO+B,SAAQ,SAAAM,KACX,IAAIwB,WAAaxB,IAAIE,UAAUuB,QAAO,SAACC,QAASC,MAAV,OAAmBD,QAAUE,KAAKD,QAAO,GAC/E3B,IAAG,YAAmB,OAAK6B,oBAAoBC,KAAKC,IAAIP,WAAY,EAAIF,kB,kDAIlEd,UAKV,IAJA,IAAI7C,OAAS6C,SAAS7C,OAClB2D,WAAa3D,OAAO4D,OACpBS,UAAY,GAEPjC,EAAI,EAAGA,EAAIuB,WAAYvB,IAAK,CAEjC,IADA,IAAIkC,IAAM,EACDhC,EAAI,EAAGA,EAAIqB,WAAYrB,IAC5BgC,KAAOL,KAAKjE,OAAOsC,GAAGC,UAAUH,IAGpCiC,UAAUpC,KAAKd,KAAK+C,oBAAoBI,MAG5CzB,SAAQ,OAAawB,Y,iDAGExB,GACvB,IAAM0B,EAAS1B,EAAS7C,OAAO8D,QAAO,SAACQ,EAAKjC,GAAN,OAAciC,EAAMjC,EAAImC,cAAa,GAC3E3B,EAAQ,eAAqB1B,KAAK+C,oBAAoBK,K,mDAG7B1B,GAAW,IAAD,OAC9B7C,EAA0B6C,EAA1B7C,OAAQyE,EAAkB5B,EAAlB4B,eACbzE,EAAO+B,SAAQ,SAAAM,GACXA,EAAG,IAAW,EAAK6B,oBAAoB7B,EAAImC,YAAcC,Q,2CAI5C5B,GACjB,IAAI7C,EAAS6C,EAAS7C,OAClB0E,EAAM7B,EAAS8B,OAAOb,QAAO,SAACQ,EAAKK,EAAQC,GAAd,OAAwBN,EAAOK,EAAS3E,EAAO4E,GAAOC,MAAM,GAE7FhC,EAAQ,IAAU1B,KAAK+C,oBAAoBQ,K,8CAGvB7B,GACpB,IAAIiC,EAAcjC,EAAS7C,OAAO,GAAGuC,UAAUqB,OAC/Cf,EAAQ,GAAS1B,KAAK+C,qBAAqBrB,EAAS6B,IAAMI,IAAeA,EAAa,M,8CAGlEjC,GACpB,IAAIiC,EAAcjC,EAAS7C,OAAO,GAAGuC,UAAUqB,OAC/Cf,EAAQ,GAAS1B,KAAK+C,oBAAoBrB,EAASkC,GAAK5D,KAAK5B,IAAIuF,EAAa,M,wCAGhE3E,EAAeE,GAC7B,IAAIb,EAAc,GAClBA,EAAW,QAAcW,EAAcJ,OACvCP,EAAW,QAAca,EAAc,GAAGN,OAC1CP,EAAW,IAAUW,EAAcH,OAAOgF,KAAI,SAAA3C,GAAG,OAAIA,EAAIwC,OACzDrF,EAAW,GAASa,EAAc2E,KAAI,SAAA9B,GAAQ,OAAIA,EAAS6B,MAG3D,IADA,IAAI/E,EAAS,GACJoC,EAAI,EAAGA,EAAIjB,KAAK1B,MAAME,gBAAiByC,IAC5CpC,EAAOiC,KAAK,CAACM,UAAW,KAc7B,OAZC/C,EAAW,OAAaQ,EAExBK,EAAc0B,SAAQ,SAAAmB,GAClBA,EAASlD,OAAO+B,SAAQ,SAACM,EAAKuC,GAC1BpF,EAAYQ,OAAO4E,GAAOrC,UAAUN,KAAKI,EAAIwC,WAIrD1D,KAAK8D,oBAAoBzF,GACzB2B,KAAK+D,kCAAkC1F,GACvC2B,KAAKgE,uCAAuC3F,GAEtCA,I,0CAGUqD,GAAW,IAAD,OACrB7C,EAAe6C,EAAf7C,OAAQ6E,EAAOhC,EAAPgC,IACb7E,EAAO+B,SAAQ,SAAAM,GACX,IAAI+C,EAAK/C,EAAIE,UAAUuB,QAAO,SAACQ,EAAKN,EAAMY,GAAZ,OAAsBN,EAAON,EAAOa,EAAID,KAAS,GAC/EvC,EAAG,GAAS,EAAK6B,oBAAoBkB,Q,wDAIXvC,GAC9B,IAAIwC,EAAMxC,EAASkC,GAAGjB,QAAO,SAACQ,EAAKS,EAAIH,GAAV,OAAoBN,EAAOS,EAAKlC,EAASgC,IAAID,KAAS,GAEnF/B,EAAQ,IAAU1B,KAAK+C,oBAAoBmB,K,6DAGRxC,GACnC,IAAIiC,EAAcjC,EAAS7C,OAAO,GAAGuC,UAAUqB,OAC/Cf,EAAQ,IAAU1B,KAAK+C,oBAAoBrB,EAASwC,IAAMlE,KAAK5B,IAAIuF,EAAa,M,0CAGhEP,GAChB,OAAOe,OAAQf,EAAQgB,QAAQ,M,uCAIhC,IAAIC,EAAQrE,KAAK3B,YAAYQ,OAAOgF,KAAI,SAAA3C,GAAG,OAAIA,EAAI+C,MACnD,OAAOjE,KAAK3B,YAAYiG,QAAQD,EAAME,QAAQvB,KAAKwB,IAAL,MAAAxB,KAAI,4JAAQqB,Q,iDAIzD,OAAOrE,KAAK1B,MAAMU,cAAcyF,IAAM,M,gEAItC,OAAOzE,KAAK3B,YAAYqG,KAAO,M,+BAI/B,IAAIC,EAAc,GACdC,EAAoB,GACpBvG,EAAc,GAqBlB,OAnBwB,MAApB2B,KAAK3B,aAAuB2B,KAAKJ,2BAC7BI,KAAKH,2CACL8E,EAAc3E,KAAK6E,iBAEnBD,EAAoB,2DAACE,kBAAD,CAChB9F,cAAiBgB,KAAK1B,MAAMU,cAC5BE,cAAiBc,KAAK1B,MAAMY,cAAcc,KAAK1B,MAAMW,qBACrDO,oBAAuBQ,KAAKR,sBAEhCnB,EAAc,2DAAC0G,YAAD,CACV1G,YAAe2B,KAAK3B,eAGxBsG,EAAc,yYAES,MAApB3E,KAAK3B,cACZsG,EAAc,2WAGV,sEACJ,2DAACK,YAAD,CACIzG,gBAAmByB,KAAK1B,MAAMC,gBAC9BC,gBAAmBwB,KAAK1B,MAAME,gBAC9BC,mBAAsBuB,KAAK1B,MAAMG,mBACjCU,kBAAqBa,KAAKb,kBAC1BE,mBAAsBW,KAAKX,qBAE9BW,KAAK1B,MAAMG,mBACZ,2DAACwG,cAAD,CACIvG,UAAasB,KAAK1B,MAAMI,UACxBK,UAAaiB,KAAK1B,MAAMS,UAAUiB,KAAK1B,MAAMQ,iBAC7CW,kBAAqBO,KAAKP,kBAC1BD,oBAAuBQ,KAAKR,oBAC5BG,iBAAoBK,KAAKL,iBACzBgF,YAAeA,IACd,GACJC,EACAvG,O,mBA5TmB6G,6CAAMC,WAiUtC,SAASH,YAAYI,GACjB,OAAO,sEAASC,GAAG,eAAeC,UAAWF,EAAM3G,mBAAqB,OAAS,IAC7E,sEACI,2QACA,oEACI8G,KAAK,OACLpF,MAAOiF,EAAM7G,gBACbiH,SAAUJ,EAAMjG,kBAAkBC,KAAK,KAAM,qBAEjD,gOACA,oEACImG,KAAK,OACLpF,MAAOiF,EAAM5G,gBACbgH,SAAUJ,EAAMjG,kBAAkBC,KAAK,KAAM,qBAEjD,qEAAQqG,QAASL,EAAM/F,oBAAvB,2FAOZ,SAAS4F,cAAeG,GAChB,OAAO,sEAASC,GAAG,iBACf,kEAAKC,UAAU,cACX,yKAAqB,sEAArB,oIACA,2DAACI,OAAD,CACIhE,SAAY0D,EAAM1G,UAClBiH,cAAiB,GACjBC,WAAc,YACdnG,kBAAqB2F,EAAM3F,qBAGnC,kEAAK6F,UAAU,cACX,yKAAqB,sEAArB,8HACA,2DAACO,gBAAD,CACIrG,oBAAuB4F,EAAM5F,sBAEjC,2DAACkG,OAAD,CACIhE,SAAY0D,EAAMrG,UAClB4G,cAAiBP,EAAMrG,UAAU4G,cACjCC,WAAc,YACdnG,kBAAqB2F,EAAM3F,qBAGnC,2DAACqG,YAAD,CACInG,iBAAkByF,EAAMzF,iBACxBgF,YAAeS,EAAMT,eAKrC,SAASmB,YAAaV,GAClB,OAAO,sEAASC,GAAG,eACf,sEACI,qEAAQI,QAASL,EAAMzF,kBAAvB,iEAIJ,wJACqByF,EAAMT,cAKnC,SAASkB,gBAAgBT,GACrB,OAAO,kEAAKE,UAAU,iBAClB,kEAAKG,QAASL,EAAM5F,oBAAoBJ,KAAK,MAAO,EAAG,oBAAvD,UAGA,kEAAKqG,QAASL,EAAM5F,oBAAoBJ,KAAK,KAAM,EAAI,oBAAvD,W,IAMFsG,O,YACF,aAAe,IAAD,2KACV,oVAEKK,gBAAkB,EAAKA,gBAAgB3G,KAArB,oKACvB,EAAK4G,WAAa,EAAKA,WAAW5G,KAAhB,oKAJR,E,8VAOER,GACZ,OAAOA,EAAOiF,KAAI,SAAClF,EAAO8E,GACtB,OAAO,iEAAIwC,IAAKxC,GACX9E,Q,iCAKFE,GAAS,IAAD,OACf,OAAOA,EAAOgF,KAAI,SAAC3C,EAAKK,GACpB,IAAI3C,EAAS,EAAKwG,MAAM1D,SAAS9C,OACjC,OAAO,iEAAIqH,IAAK1E,GACZ,qEAAK3C,EAAO2C,IACX,EAAK2E,WAAWhF,EAAIE,UAAWG,S,iCAKjC4E,EAAY5E,GAAW,IAAD,OAC7B,OAAO4E,EAAWtC,KAAI,SAAChB,EAAMuD,EAAWC,GACpC,OAAO,iEAAIJ,IAAKG,GACVA,EAAY7E,GAAY6E,GAAaC,EAAM5D,OACvC,oEACE8C,KAAK,OACLpF,MAAO0C,EACP2C,SAAU,EAAKJ,MAAM3F,kBAAkBL,KAAK,KAAMmC,EAAU6E,EAAW,EAAKhB,MAAMQ,cAEpF/C,Q,+BAMd,OAAO,wEACH,wEACI,qEACI,qEAAK7C,KAAKoF,MAAMO,eACf3F,KAAK+F,gBAAgB/F,KAAKoF,MAAM1D,SAAS9C,SAE7CoB,KAAKgG,WAAWhG,KAAKoF,MAAM1D,SAAS7C,c,GA/ChCqG,6CAAMC,WAqD3B,SAASL,kBAAkBM,GACvB,OAAO,sEAASC,GAAG,qBACf,kEAAKC,UAAU,kBACX,oNACA,2DAACgB,WAAD,CACI5E,SAAY0D,EAAMpG,cAClB2G,cAAiB,MAGzB,kEAAKL,UAAU,kBACX,8MACA,2DAACiB,oBAAD,CACI/G,oBAAuB4F,EAAM5F,sBAEjC,2DAAC8G,WAAD,CACI5E,SAAY0D,EAAMlG,cAClByG,cAAiBP,EAAMlG,cAAcyG,kBAMrD,SAASY,oBAAoBnB,GACzB,OAAO,kEAAKE,UAAU,iBAClB,kEAAKG,QAASL,EAAM5F,oBAAoBJ,KAAK,MAAO,EAAG,wBAAvD,UAGA,kEAAKqG,QAASL,EAAM5F,oBAAoBJ,KAAK,KAAM,EAAI,wBAAvD,W,IAMFkH,W,YACF,aAAe,IAAD,2KACV,oVAEKP,gBAAkB,EAAKA,gBAAgB3G,KAArB,oKACvB,EAAK4G,WAAa,EAAKA,WAAW5G,KAAhB,oKAJR,E,8VAOER,GACZ,OAAOA,EAAOiF,KAAI,SAAClF,EAAO8E,GACtB,OAAO,iEAAIwC,IAAKxC,GACX9E,Q,iCAKFE,EAAQD,GAAS,IAAD,OACvB,OAAOC,EAAOgF,KAAI,SAAC3C,EAAKK,GACpB,OAAO,iEAAI0E,IAAK1E,GACZ,qEAAK3C,EAAO2C,IACX,EAAK2E,WAAWhF,EAAIE,WACrB,qEAAKvC,EAAO0C,GAAU8B,aACtB,qEAAKxE,EAAO0C,GAAUmC,W,iCAKvByC,GACP,OAAOA,EAAWtC,KAAI,SAAChB,EAAMuD,GACzB,OAAO,iEAAIH,IAAKG,GACXvD,Q,+BAMT,OAAO,wEACH,wEACI,qEACI,qEAAK7C,KAAKoF,MAAMO,eACf3F,KAAK+F,gBAAgB/F,KAAKoF,MAAM1D,SAAS9C,QAC1C,mHAAY,sEAAZ,yFACA,4FAEHoB,KAAKgG,WAAWhG,KAAKoF,MAAM1D,SAAS7C,OAAQmB,KAAKoF,MAAM1D,SAAS9C,QACjE,qEACI,4EACCoB,KAAKkG,WAAWlG,KAAKoF,MAAM1D,SAAS8B,SAEzC,qEACI,+EACA,qEAAKxD,KAAKoF,MAAM1D,SAAS6B,MAE7B,qEACI,qFACA,qEAAKvD,KAAKoF,MAAM1D,SAASkC,KAE7B,qEACI,qFACA,qEAAK5D,KAAKoF,MAAM1D,SAAS+C,W,GA3DpBS,6CAAMC,WAkE/B,SAASJ,YAAYK,GACjB,OAAO,sEAASC,GAAG,sBACf,kEAAKC,UAAU,mBACX,+KACA,2DAACkB,aAAD,CACI9E,SAAY0D,EAAM/G,gB,IAM5BmI,a,YACF,aAAe,IAAD,2KACV,oVAEKR,WAAa,EAAKA,WAAW5G,KAAhB,oKAHR,E,yVAMHP,EAAQD,GAAS,IAAD,OACvB,OAAOC,EAAOgF,KAAI,SAAC3C,EAAKK,GACpB,OAAO,iEAAI0E,IAAK1E,GACZ,qEAAK3C,EAAO2C,IACX,EAAK2E,WAAWhF,EAAIE,WACrB,qEAAKvC,EAAO0C,GAAU0C,U,iCAKvBkC,GACP,OAAOA,EAAWtC,KAAI,SAAChB,EAAMuD,GACzB,OAAO,iEAAIH,IAAKG,GACXvD,Q,+BAMT,OAAO,wEACH,wEACI,qEACI,iEAAI4D,QAAQ,KAAZ,kCAAsB,sEAAtB,0DACCzG,KAAKkG,WAAWlG,KAAKoF,MAAM1D,SAASgF,SACrC,iEAAID,QAAQ,KAAZ,mDAAwB,sEAAxB,mDAAqC,sEAArC,iEAEJ,qEACKzG,KAAKkG,WAAWlG,KAAKoF,MAAM1D,SAASgC,MAExC1D,KAAKgG,WAAWhG,KAAKoF,MAAM1D,SAAS7C,OAAQmB,KAAKoF,MAAM1D,SAAS4C,SACjE,qEACI,2FACA,qEAAKtE,KAAKoF,MAAM1D,SAASwC,MAE7B,qEACI,2FACA,qEAAKlE,KAAKoF,MAAM1D,SAASgD,Y,GA3ClBQ,6CAAMC,WAkDjCwB,iDAASC,OACL,2DAACzI,kBAAD,MACA0I,SAASC,eAAe,U","file":"static/js/main.1c7010c3.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass HierarchyAnalysis extends React.Component {\n    constructor() {\n        super();\n        this.RCI = [0, 0, 0.58, 0.9, 1.12, 1.24, 1.32, 1.41, 1.45, 1.49];\n        this.resultTable = null;\n        this.state = {\n            criteriasNumber: '',\n            analoguesNumber: '',\n            isStartButtinPress: false,\n            criterias: {\n                label: 'c',\n                labels: null,\n                matrix: null,\n            },\n            currentAnalogue: 0,\n            analogues: [],\n            calcCriterias: null,\n            currentCalcAnalogue: 0,\n            calcAnalogues: null,\n        };\n\n        this.startInputHandler = this.startInputHandler.bind(this);\n        this.startButtonHandler = this.startButtonHandler.bind(this);\n        this.prepareMatrix = this.prepareMatrix.bind(this);\n        this.prepareAnalogues = this.prepareAnalogues.bind(this);\n        this.handleCurrentMatrix = this.handleCurrentMatrix.bind(this);\n        this.matrixInputHandle = this.matrixInputHandle.bind(this);\n        this.putValueInMatrix = this.putValueInMatrix.bind(this);\n        this.createCalcMatrix = this.createCalcMatrix.bind(this);\n        this.checkConsistencyRelation = this.checkConsistencyRelation.bind(this);\n        this.checkGeneralizedRelationshipConsistency = this.checkGeneralizedRelationshipConsistency.bind(this);\n    };\n\n    startInputHandler(name, event) {\n        this.setState({[name]: +event.target.value});\n    };\n\n    startButtonHandler() {\n        this.prepareMatrix();\n        this.setState({isStartButtinPress: !this.state.isStartButtinPress});\n    };\n\n    prepareMatrix() {\n        let newCriterias = JSON.parse(JSON.stringify(this.state.criterias));\n        newCriterias.matrix = this.createMatrix(this.state.criteriasNumber);\n        newCriterias.labels = this.createLabels(newCriterias.label, this.state.criteriasNumber);\n        this.prepareAnalogues(newCriterias.labels);\n\n        this.setState({criterias: newCriterias});  \n    };\n\n    prepareAnalogues(arrCriteriasLabel) {\n        let newAnalogues = JSON.parse(JSON.stringify(this.state.analogues));\n        arrCriteriasLabel.forEach((label) => {\n            let objAnalogue = {};\n            objAnalogue['criteriaLabel'] = label;\n            objAnalogue['labels'] = this.createLabels('a', this.state.analoguesNumber);\n            objAnalogue['matrix'] = this.createMatrix(this.state.analoguesNumber);\n            newAnalogues.push(objAnalogue);\n        });\n\n        this.setState({analogues: newAnalogues});\n    };\n\n    createMatrix(rank) {\n        let newMatrix = [];\n\n        for (let i = 0; i < rank; i++) {\n            let row = [];\n\n            for (let j = 0; j < rank; j++) {\n                if (i === j) {\n                    row.push(1);\n                } else {\n                    row.push('');\n                };\n            };\n            \n            newMatrix.push({rowMatrix: row});\n        };\n\n        return newMatrix;\n    };\n\n    createLabels(label, rank) {\n        let labels = [];\n        for (let i = 1; i <= rank; i++) {\n            labels.push(label + i)\n        };\n\n        return labels;\n    };\n\n    handleCurrentMatrix(num, name) {\n        let newCurrentAnalogue = this.state[name];\n\n        if (newCurrentAnalogue === 0 && num === -1) {\n            newCurrentAnalogue = 0;\n        } else if (newCurrentAnalogue === (this.state.criteriasNumber - 1) && num === +1) {\n            newCurrentAnalogue = this.state.criteriasNumber - 1;\n        } else {\n            newCurrentAnalogue += num;\n        };\n\n        this.setState({[name]: newCurrentAnalogue});\n    };\n\n    matrixInputHandle(indexRow, indexCol, parametrName, event) {\n        let parametr = JSON.parse(JSON.stringify(this.state[parametrName]));\n\n        if (parametrName === 'criterias') {\n            let matrix = parametr.matrix;\n            parametr.matrix = this.putValueInMatrix(matrix, event.target.value, indexRow, indexCol);\n        } else {\n            let matrix = parametr[this.state.currentAnalogue].matrix;\n            this.putValueInMatrix(matrix, event.target.value, indexRow, indexCol);\n        };\n\n        this.setState({[parametrName]: parametr});\n    };\n\n    putValueInMatrix(matrix, value, indexRow, indexCol) {\n        matrix[indexRow].rowMatrix[indexCol] = value;\n        if (value.match(/\\//)) {\n            let digit = value.split('/')[1];\n            matrix[indexCol].rowMatrix[indexRow] = digit;\n        } else {\n            matrix[indexCol].rowMatrix[indexRow] = '1/' + value;\n        };\n\n        return matrix;\n    };\n\n    createCalcMatrix() {\n        let newCriterias = JSON.parse(JSON.stringify(this.state.criterias));\n        let newAnalogues = JSON.parse(JSON.stringify(this.state.analogues));\n\n        this.calculateMatrix(newCriterias);\n        newAnalogues.forEach(analogue => this.calculateMatrix(analogue));\n\n        this.resultTable = this.createResultTable(newCriterias, newAnalogues);\n        this.setState({\n            calcCriterias: newCriterias,\n            calcAnalogues: newAnalogues,\n        });\n    };\n\n    calculateMatrix(parametr) {\n        this.calcGeometricAverageRow(parametr);\n        this.calcSumGeometricAverageRow(parametr);\n        this.calcNormalizedPriorityVector(parametr);\n        this.calcSumColumn(parametr);\n        this.calcEigenvalueMatrix(parametr);\n        this.calcReconciliationIndex(parametr);\n        this.calcConsistencyRelation(parametr);\n    };\n\n    calcGeometricAverageRow(parametr) {\n        let {matrix} = parametr;\n        const matrixRank = matrix[0].rowMatrix.length;\n        matrix.forEach(row => {\n            let rowProduct = row.rowMatrix.reduce((product, cell) => product * eval(cell), 1);\n            row['geomAverage'] =  this.numberNormalization(Math.pow(rowProduct, 1 / matrixRank));\n        });\n    };\n\n    calcSumColumn(parametr) {\n        let matrix = parametr.matrix;\n        let matrixRank = matrix.length;\n        let arrSumCol = [];\n        \n        for (let i = 0; i < matrixRank; i++) {\n            let sum = 0;\n            for (let j = 0; j < matrixRank; j++) {\n                sum += eval(matrix[j].rowMatrix[i]);\n            };\n\n            arrSumCol.push(this.numberNormalization(sum));\n        };\n\n        parametr['sumCol'] = arrSumCol; \n    };\n\n    calcSumGeometricAverageRow(parametr) {\n        const number = parametr.matrix.reduce((sum, row) => sum + row.geomAverage, 0);\n        parametr['sumGeomAverage'] = this.numberNormalization(number);\n    };\n\n    calcNormalizedPriorityVector(parametr) {\n        let {matrix, sumGeomAverage} = parametr;\n        matrix.forEach(row => {\n            row['NPV'] =  this.numberNormalization(row.geomAverage / sumGeomAverage);\n        });\n    };\n\n    calcEigenvalueMatrix(parametr) {\n        let matrix = parametr.matrix;\n        let EVM = parametr.sumCol.reduce((sum, sumCol, index) => sum + (sumCol * matrix[index].NPV), 0);\n        \n        parametr['EVM'] = this.numberNormalization(EVM);\n    };\n\n    calcReconciliationIndex(parametr) {\n        let rankMatrix =  parametr.matrix[0].rowMatrix.length;\n        parametr['RI'] = this.numberNormalization((parametr.EVM - rankMatrix) / (rankMatrix - 1));\n    };\n\n    calcConsistencyRelation(parametr) {\n        let rankMatrix =  parametr.matrix[0].rowMatrix.length;\n        parametr['CR'] = this.numberNormalization(parametr.RI / this.RCI[rankMatrix - 1]);\n    };\n\n    createResultTable(calcCriterias, calcAnalogues) {\n        let resultTable = {};\n        resultTable['zeroCol'] = calcCriterias.labels;\n        resultTable['zeroRow'] = calcAnalogues[0].labels;\n        resultTable['NPV'] = calcCriterias.matrix.map(row => row.NPV);\n        resultTable['RI'] = calcAnalogues.map(analogue => analogue.RI);\n\n        let matrix = [];\n        for (let i = 0; i < this.state.analoguesNumber; i++) {\n            matrix.push({rowMatrix: []})\n        };\n        resultTable['matrix'] = matrix;\n\n        calcAnalogues.forEach(analogue => {\n            analogue.matrix.forEach((row, index) => {\n                resultTable.matrix[index].rowMatrix.push(row.NPV);\n            });\n        });\n\n        this.calcOverallPriority(resultTable);\n        this.calcGeneralizedHarmonizationIndex(resultTable);\n        this.calcGeneralizedRelationshipConsistency(resultTable);\n        \n       return resultTable;\n    };\n\n    calcOverallPriority(parametr) {\n        let {matrix, NPV} = parametr;\n        matrix.forEach(row => {\n            let OP = row.rowMatrix.reduce((sum, cell, index) => sum + (cell * NPV[index]), 0);\n            row['OP'] = this.numberNormalization(OP);\n        });\n    };\n\n    calcGeneralizedHarmonizationIndex(parametr) {\n        let GHI = parametr.RI.reduce((sum, RI, index) => sum + (RI * parametr.NPV[index]), 0);\n        \n        parametr['GHI'] = this.numberNormalization(GHI);\n    };\n\n    calcGeneralizedRelationshipConsistency(parametr) {\n        let rankMatrix =  parametr.matrix[0].rowMatrix.length;\n        parametr['GCR'] = this.numberNormalization(parametr.GHI / this.RCI[rankMatrix - 1]);\n    };\n\n    numberNormalization(number) {\n        return Number((number).toFixed(2))\n    };\n\n    getBestVariant() {\n       let arrOP = this.resultTable.matrix.map(row => row.OP);\n       return this.resultTable.zeroRow[arrOP.indexOf(Math.max(...arrOP))];\n    };\n\n    checkConsistencyRelation() {\n        return this.state.calcCriterias.CR <= 0.15;\n    };\n\n    checkGeneralizedRelationshipConsistency() {\n        return this.resultTable.GCR <= 0.15;\n    };\n\n    render() {\n        let bestVariant = '';\n        let calcMatrixSection = '';\n        let resultTable = '';\n    \n        if (this.resultTable != null && this.checkConsistencyRelation()) {\n            if (this.checkGeneralizedRelationshipConsistency()) {\n                bestVariant = this.getBestVariant();\n            \n                calcMatrixSection = <CalcMatrixSection\n                    calcCriterias = {this.state.calcCriterias}\n                    calcAnalogues = {this.state.calcAnalogues[this.state.currentCalcAnalogue]}\n                    handleCurrentMatrix = {this.handleCurrentMatrix}\n                />\n                resultTable = <ResultTable\n                    resultTable = {this.resultTable}\n                />\n            } else {\n                bestVariant = 'Общие отношение согласованность больше 15%. Пересчитайте матрицы вариантов.';\n            };\n        } else if (this.resultTable != null){\n            bestVariant = 'Отношение согласованность больше 15%. Пересчитайте матрицу критериев.';\n        };\n\n        return  <div>\n            <StartWindow \n                criteriasNumber = {this.state.criteriasNumber}\n                analoguesNumber = {this.state.analoguesNumber}\n                isStartButtinPress = {this.state.isStartButtinPress}\n                startInputHandler = {this.startInputHandler}\n                startButtonHandler = {this.startButtonHandler}\n            />\n            {this.state.isStartButtinPress ? \n            <MatrixSection \n                criterias = {this.state.criterias}\n                analogues = {this.state.analogues[this.state.currentAnalogue]}\n                matrixInputHandle = {this.matrixInputHandle}\n                handleCurrentMatrix = {this.handleCurrentMatrix}\n                createCalcMatrix = {this.createCalcMatrix}\n                bestVariant = {bestVariant}\n            /> : ''} \n            {calcMatrixSection}\n            {resultTable}\n        </div>\n    };\n};\n\nfunction StartWindow(props) {\n    return <section id='startSection' className={props.isStartButtinPress ? 'hide' : ''}>\n        <div>\n            <p>Введите количество критериев оценки</p>\n            <input \n                type=\"text\"\n                value={props.criteriasNumber}\n                onChange={props.startInputHandler.bind(null, 'criteriasNumber')}\n            /> \n            <p>Введите количество аналогов</p>\n            <input \n                type=\"text\"\n                value={props.analoguesNumber}\n                onChange={props.startInputHandler.bind(null, 'analoguesNumber')}\n            />\n            <button onClick={props.startButtonHandler}>\n                Создать матрицы\n            </button>\n        </div>\n    </section>;\n};\n\nfunction MatrixSection (props) {\n        return <section id=\"matrixSection\">\n            <div className=\"matrixArea\">\n                <p>Заполните матрицу <br/> ранжирование критериев</p>\n                <Matrix \n                    parametr = {props.criterias}\n                    criteriaLabel = {''}\n                    matrixName = {'criterias'}\n                    matrixInputHandle = {props.matrixInputHandle}\n                />\n            </div>\n            <div className=\"matrixArea\">\n                <p>Заполните матрицы <br/> ранжирование аналогов</p>\n                <CurrentAnalogue \n                    handleCurrentMatrix = {props.handleCurrentMatrix}\n                />\n                <Matrix \n                    parametr = {props.analogues}\n                    criteriaLabel = {props.analogues.criteriaLabel}\n                    matrixName = {'analogues'}\n                    matrixInputHandle = {props.matrixInputHandle}\n                />\n            </div>\n            <CalcSection \n                createCalcMatrix={props.createCalcMatrix}\n                bestVariant = {props.bestVariant}\n            />\n    </section>\n};\n\nfunction CalcSection (props) {\n    return <section id=\"calcSection\">\n        <div>\n            <button onClick={props.createCalcMatrix}>\n                Рассчитать\n            </button>\n        </div>\n        <p>\n            Лучший вариант: {props.bestVariant}\n        </p>\n    </section>\n};\n\nfunction CurrentAnalogue(props) {\n    return <div className='currentMatrix'>\n        <div onClick={props.handleCurrentMatrix.bind(null, -1, 'currentAnalogue')}>\n            &#8249;\n        </div>\n        <div onClick={props.handleCurrentMatrix.bind(null, +1, 'currentAnalogue')}>\n            &#8250;\n        </div>\n    </div>\n};\n\nclass Matrix extends React.Component {\n    constructor() {\n        super();\n\n        this.createZeroCells = this.createZeroCells.bind(this);\n        this.createRows = this.createRows.bind(this);\n    };\n\n    createZeroCells(labels) {\n        return labels.map((label, index) => {\n            return <td key={index}>\n                {label}\n            </td>;\n        });\n    };\n\n    createRows(matrix) {\n        return matrix.map((row, indexRow) => {\n            let labels = this.props.parametr.labels;\n            return <tr key={indexRow}>\n                <td>{labels[indexRow]}</td>\n                {this.createCell(row.rowMatrix, indexRow)}\n            </tr>\n        });\n    };\n\n    createCell(arrayCells, indexRow) {\n        return arrayCells.map((cell, indexColl, array) => {\n            return <td key={indexColl}>\n                {(indexColl > indexRow && indexColl <= array.length) \n                    ? <input \n                        type=\"text\"\n                        value={cell}\n                        onChange={this.props.matrixInputHandle.bind(null, indexRow, indexColl, this.props.matrixName)}\n                    /> \n                    : cell\n                }</td>\n        });\n    };\n    \n    render() {\n        return <table>\n            <tbody>\n                <tr>\n                    <td>{this.props.criteriaLabel}</td>\n                    {this.createZeroCells(this.props.parametr.labels)}\n                </tr>\n                {this.createRows(this.props.parametr.matrix)}\n            </tbody>\n        </table>\n    };\n};\n\nfunction CalcMatrixSection(props) {\n    return <section id=\"calcMatrixSection\">\n        <div className=\"calcMatrixArea\">\n            <p>Таблица расчета критериев</p>\n            <CalcMatrix \n                parametr = {props.calcCriterias}\n                criteriaLabel = {''}\n            />\n        </div>\n        <div className=\"calcMatrixArea\">\n            <p>Таблица расчета аналогов</p>\n            <CurrentCalcAnalogue \n                handleCurrentMatrix = {props.handleCurrentMatrix}\n            />\n            <CalcMatrix \n                parametr = {props.calcAnalogues}\n                criteriaLabel = {props.calcAnalogues.criteriaLabel}\n            />\n        </div>\n    </section>\n};\n\nfunction CurrentCalcAnalogue(props) {\n    return <div className='currentMatrix'>\n        <div onClick={props.handleCurrentMatrix.bind(null, -1, 'currentCalcAnalogue')}>\n            &#8249;\n        </div>\n        <div onClick={props.handleCurrentMatrix.bind(null, +1, 'currentCalcAnalogue')}>\n            &#8250;\n        </div>\n    </div>\n};\n\nclass CalcMatrix extends React.Component {\n    constructor() {\n        super();\n\n        this.createZeroCells = this.createZeroCells.bind(this);\n        this.createRows = this.createRows.bind(this);\n    };\n\n    createZeroCells(labels) {\n        return labels.map((label, index) => {\n            return <td key={index}>\n                {label}\n            </td>;\n        });\n    };\n\n    createRows(matrix, labels) {\n        return matrix.map((row, indexRow) => {\n            return <tr key={indexRow}>\n                <td>{labels[indexRow]}</td>\n                {this.createCell(row.rowMatrix)}\n                <td>{matrix[indexRow].geomAverage}</td>\n                <td>{matrix[indexRow].NPV}</td>\n            </tr>\n        });\n    };\n\n    createCell(arrayCells) {\n        return arrayCells.map((cell, indexColl) => {\n            return <td key={indexColl}>\n                {cell}\n            </td>\n        });\n    };\n    \n    render() {\n        return <table>\n            <tbody>\n                <tr>\n                    <td>{this.props.criteriaLabel}</td>\n                    {this.createZeroCells(this.props.parametr.labels)}\n                    <td>Среднее <br/> геометрическое</td>\n                    <td>НВП</td>\n                </tr>\n                {this.createRows(this.props.parametr.matrix, this.props.parametr.labels)}\n                <tr>\n                    <td>sum</td>\n                    {this.createCell(this.props.parametr.sumCol)}\n                </tr>\n                <tr>\n                    <td>&#955;</td>\n                    <td>{this.props.parametr.EVM}</td>\n                </tr>\n                <tr>\n                    <td>ИС</td>\n                    <td>{this.props.parametr.RI}</td>\n                </tr>\n                <tr>\n                    <td>ОС</td>\n                    <td>{this.props.parametr.CR}</td>\n                </tr>\n            </tbody>\n        </table>\n    };\n};\n\nfunction ResultTable(props) {\n    return <section id=\"resultTableSection\">\n        <div className=\"resultTableArea\">\n            <p>Результаты расчета</p>\n            <ResultMatrix \n                parametr = {props.resultTable}\n            />\n        </div>\n    </section>\n};\n\nclass ResultMatrix extends React.Component {\n    constructor() {\n        super();\n\n        this.createRows = this.createRows.bind(this);\n    };\n\n    createRows(matrix, labels) {\n        return matrix.map((row, indexRow) => {\n            return <tr key={indexRow}>\n                <td>{labels[indexRow]}</td>\n                {this.createCell(row.rowMatrix)}\n                <td>{matrix[indexRow].OP}</td>\n            </tr>\n        });\n    };\n\n    createCell(arrayCells) {\n        return arrayCells.map((cell, indexColl) => {\n            return <td key={indexColl}>\n                {cell}\n            </td>\n        });\n    };\n    \n    render() {\n        return <table>\n            <tbody>\n                <tr>\n                    <td rowSpan=\"2\">НВП по<br/>критериям</td>\n                    {this.createCell(this.props.parametr.zeroCol)}\n                    <td rowSpan=\"2\">Итоговые<br/>значения<br/>приориетов</td>\n                </tr>\n                <tr>\n                    {this.createCell(this.props.parametr.NPV)}\n                </tr>\n                {this.createRows(this.props.parametr.matrix, this.props.parametr.zeroRow)}\n                <tr>\n                    <td>ОИС</td>\n                    <td>{this.props.parametr.GHI}</td>\n                </tr>\n                <tr>\n                    <td>ООС</td>\n                    <td>{this.props.parametr.GCR}</td>\n                </tr>\n            </tbody>\n        </table>\n    };\n};\n\nReactDOM.render(\n    <HierarchyAnalysis />,\n    document.getElementById('root')\n);"],"sourceRoot":""}